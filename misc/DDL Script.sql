CREATE TABLE DIM_PTNT (
PTNT_ID VARCHAR(100) PRIMARY KEY,
DOB_MTH_YR VARCHAR(10),
SEX VARCHAR(5),
HT INT,
WT INT,
ZIP INT,
TICK_BITE_DT VARCHAR(10),
TICK_BITE_ADDR_LN_1 VARCHAR(100),
TICK_BITE_ADDR_LN_2 VARCHAR(100),
TICK_BITE_ADDR_LN_3 VARCHAR(100),
TICK_BITE_CITY VARCHAR(100),
TICK_BITE_ST VARCHAR(100),
TICK_BITE_ZIP INT,
TICK_BITE_BODY_PRT_ID INT,
TICK_BITE_MULTIPLE_FLG INT );

CREATE TABLE DIM_SYMP_CAT (
CAT_ID INT PRIMARY KEY,
CAT_NM VARCHAR(100),
CAT_DESC VARCHAR(100) );

CREATE TABLE DIM_SYMP_SUB_CAT (
SUB_CAT_ID INT,
CAT_ID INT REFERENCES DIM_SYMP_CAT,
SUB_CAT_NM VARCHAR(100),
SUB_CAT_DESC VARCHAR(100) );

CREATE TABLE DIM_TRTT (
TRTT_ID INT PRIMARY KEY,
TRTT_NM VARCHAR(100),
TRTT_DESC VARCHAR(100) );

CREATE TABLE DIM_DIS (
DIS_ICD_CD VARCHAR(10) PRIMARY KEY,
DIS_NM VARCHAR(100),
DIS_DESC VARCHAR(100) );

CREATE TABLE DIM_BDY_PRT (
BDY_PRT_ID INT PRIMARY KEY
BDY_PRT_GRP VARCHAR(100),
BDY_PRT_NM VARCHAR(100) );

CREATE TABLE M_PTNT_DIS (
PTNT_ID VARCHAR(100) REFERENCES DIM_PTNT,
DIS_ICD_CD VARCHAR(10) REFERENCES DIM_DIS);

CREATE TABLE M_PTNT_TRTT (
PTNT_ID VARCHAR(100) REFERENCES DIM_PTNT,
TRTT_ID INT REFERENCES DIM_TRTT);

CREATE TABLE DIM_SYMP (
SYMP_ID INT PRIMARY KEY,
SYMP_NM VARCHAR(100),
SYMP_DESC_SHRT VARCHAR(100),
SYMP_DESC_LONG VARCHAR(500),
CAT_ID INT REFERENCES DIM_SYMP_CAT,
FLG_DURATION INT,
FLG_BODY_PRT INT,
SCL_TYP VARCHAR(100),
SCL_UNITS VARCHAR(100) );

CREATE TABLE M_PTNT_SYMP (
PTNT_ID VARCHAR(100) REFERENCES DIM_PTNT,
SYMP_ID INT REFERENCES DIM_SYMP,
FLG_ACT INT );

CREATE TABLE FCT_SYMP_OBS (
OBS_ID INT PRIMARY KEY,
PTNT_ID VARCHAR(100) REFERENCES DIM_PTNT,
SYMP_ID INT REFERENCES DIM_SYMP,
DT_SK INT,
DURATION INT,
SCL_VAL VARCHAR(100),
BDY_PRT_ID INT REFERENCES DIM_BDY_PRT);

CREATE TABLE FCT_NOTES_IMP (
PTNT_ID VARCHAR(100) REFERENCES DIM_PTNT,
DT_SK INT,
NOTES VARCHAR(500),
FLG_IMP INT );

CREATE TABLE DIM_CNTRL (
CNTRL_ID INT PRIMARY KEY,
CNTRL_NM VARCHAR(100) );

CREATE TABLE SYS_USR_LOGIN (
USER_ID VARCHAR(100),
USER_EMAIL VARCHAR(100),
USER_PASS VARCHAR(500),
USER_FIRST_NM VARCHAR(100),
USER_LAST_NM VARCHAR(100) );


DROP FUNCTION IF EXISTS SP_FETCH_TRTT();
CREATE OR REPLACE FUNCTION SP_FETCH_TRTT()
RETURNS TABLE (TRTT_ID INT, TRTT_NM VARCHAR) AS $$
SELECT TRTT_ID, TRTT_NM FROM conquer_lyme.DIM_TRTT;
$$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS SP_FETCH_BDY_PRT();
CREATE OR REPLACE FUNCTION SP_FETCH_BDY_PRT()
RETURNS TABLE (BDY_PRT_ID INT, BDY_PRT_NM VARCHAR) AS $$
SELECT BDY_PRT_ID, BDY_PRT_NM FROM conquer_lyme.DIM_BDY_PRT;
$$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS SP_FETCH_SYMPTOMS();
CREATE OR REPLACE FUNCTION SP_FETCH_SYMPTOMS()
RETURNS TABLE (SYMP_ID INT, SYMP_NM VARCHAR, CAT_NM VARCHAR) AS $$
SELECT DIM_SYMP.SYMP_ID, DIM_SYMP.SYMP_NM, DIM_SYMP_CAT.CAT_NM FROM conquer_lyme.DIM_SYMP INNER JOIN conquer_lyme.DIM_SYMP_CAT ON DIM_SYMP.CAT_ID = DIM_SYMP_CAT.CAT_ID;
$$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS SP_USER_ID_EXISTS(TEXT);
CREATE OR REPLACE FUNCTION SP_USER_ID_EXISTS(TEXT)
RETURNS BIGINT AS $$
SELECT COUNT(*) FROM SYS_USR_LOGIN WHERE USER_ID = $1;
$$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS SP_NEW_USER_LOGIN(TEXT, TEXT, TEXT);
CREATE OR REPLACE FUNCTION SP_NEW_USER_LOGIN(TEXT, TEXT, TEXT)
RETURNS VOID AS $$
INSERT INTO conquer_lyme.SYS_USR_LOGIN (USER_ID, USER_EMAIL, USER_PASS) VALUES ($1, $2, $3);
COMMIT;
$$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS SP_USER_EXISTS(TEXT);
CREATE OR REPLACE FUNCTION SP_USER_EXISTS(TEXT)
RETURNS BIGINT AS $$
SELECT COUNT(*) FROM SYS_USR_LOGIN WHERE USER_EMAIL = $1;
$$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS SP_USER_LOGIN(TEXT);
CREATE OR REPLACE FUNCTION SP_USER_LOGIN(TEXT)
RETURNS TABLE (USER_PASS VARCHAR, USER_ID VARCHAR, USER_F VARCHAR, USER_L VARCHAR) AS $$
SELECT USER_PASS, USER_ID, USER_FIRST_NM, USER_LAST_NM FROM conquer_lyme.SYS_USR_LOGIN WHERE USER_EMAIL = $1;
$$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS SP_FETCH_USER_SYMPTOMS(TEXT);
CREATE OR REPLACE FUNCTION SP_FETCH_USER_SYMPTOMS(TEXT)
RETURNS TABLE (SYMP_ID INT, SYMP_NM VARCHAR, SCL_TYP INT, SCL_UNITS VARCHAR) AS $$
SELECT T1.SYMP_ID, T1.SYMP_NM, T1.SCL_TYP, T1.SCL_UNITS FROM conquer_lyme.DIM_SYMP T1 INNER JOIN conquer_lyme.M_PTNT_SYMP T2 ON T1.SYMP_ID = T2.SYMP_ID WHERE T2.PTNT_ID = $1;
$$ LANGUAGE SQL;